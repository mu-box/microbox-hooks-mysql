#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gomicro/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

include Hooky::Mysql
config = converge( CONFIG_DEFAULTS, payload[:config] || {} )

dedicated = payload[:component][:dedicated] || false

if payload[:platform] == 'local'
  memcap = 128
  dedicated = true
else
  total_mem = `vmstat -s | grep 'total memory' | awk '{print $1}'`.to_i
  cgroup_mem = `cat /sys/fs/cgroup/memory/memory.limit_in_bytes`.to_i
  memcap = [ total_mem / 1024, cgroup_mem / 1024 / 1024 ].min
end

if payload[:platform] != 'local'

  # Setup root keys for data migrations
  directory '/root/' do
    mode 0700
  end

  directory '/root/.ssh' do
    recursive true
    mode 0700
  end

  file '/root/.ssh/id_rsa' do
    content payload[:ssh][:admin_key][:private_key]
    mode 0600
  end

  file '/root/.ssh/id_rsa.pub' do
    content payload[:ssh][:admin_key][:public_key]
  end

  file '/root/.ssh/authorized_keys' do
    content payload[:ssh][:admin_key][:public_key]
  end

  # Create some ssh host keys
  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_rsa_key -N '' -t rsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_rsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_dsa_key -N '' -t dsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_dsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_ecdsa_key -N '' -t ecdsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_ecdsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_ed25519_key -N '' -t ed25519" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_ed25519_key' }
  end

end

if payload[:logvac_host]
  # Configure narc
  template '/opt/gomicro/etc/narc.conf' do
    variables ({ 
      uid: payload[:component][:uid], 
      logvac: payload[:logvac_host] 
    })
  end
  # ensure log files are created
  ["/var/log/gomicro/db/current", "/var/log/mysql/error.log", "/var/log/mysql/slowquery.log"].each do |log_file|
    if not ::File.exists? "#{log_file}"
      parent = File.expand_path("..", "#{log_file}")
      
      # create the parent directory
      directory parent do
        owner 'gomicro'
        group 'gomicro'
        recursive true
      end
      
      # create the log_file
      file "#{log_file}" do
        owner 'gomicro'
        group 'gomicro'
        mode  0644
      end
    end
  end

  directory '/etc/service/narc'

  file '/etc/service/narc/run' do
    mode 0755
    content <<-EOF
#!/bin/sh -e
export PATH="/opt/local/sbin:/opt/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/gomicro/sbin:/opt/gomicro/bin"

exec /opt/gomicro/bin/narcd /opt/gomicro/etc/narc.conf
    EOF
  end
end

if ["default", "primary", "secondary"].include? payload[:member][:role]
  directory '/data/var/db/mysql' do
    recursive true
  end

  # chown data/var/db/mysql for gomicro
  execute 'chown /data/var/db/mysql' do
    command 'chown -R gomicro:gomicro /data/var/db/mysql'
  end

  directory '/var/log/mysql' do
    owner 'gomicro'
    group 'gomicro'
  end

  template '/data/etc/my.cnf' do
    mode 0644
    source 'my-prod.cnf.erb'
    owner 'gomicro'
    group 'gomicro'
    variables ({
      config: config,
      type:    'mysql',
      version: version(),
      memcap:  memcap,
      dedicated: dedicated,
      plugins: plugins(config)
    })
  end

  execute 'mysql_install_db --basedir=/data --ldata=/data/var/db/mysql --user=gomicro --defaults-file=/data/etc/my.cnf' do
    user 'gomicro'
    not_if { ::Dir.exists? '/data/var/db/mysql/mysql' }
  end

  # Import service (and start)
  directory '/etc/service/db' do
    recursive true
  end

  directory '/etc/service/db/log' do
    recursive true
  end

  template '/etc/service/db/log/run' do
    mode 0755
    source 'log-run.erb'
    variables ({ svc: "db" })
  end

  template '/etc/service/db/run' do
    mode 0755
    variables ({ exec: "mysqld --defaults-file=/data/etc/my.cnf --pid-file=/tmp/mysql.pid 2>&1" })
  end

  # Wait for server to start
  until File.exists?( "/tmp/mysqld.sock" )
     sleep( 1 )
  end

  users = payload[:users]

  if payload[:platform] == 'local'
    users.each do |user|
      user[:meta][:privileges] << { privilege: "ALL PRIVILEGES", on: "*.*", with_grant: true }
    end
  end

  # Create users and databases
  template '/tmp/setup.sql' do
    variables ({
      hostname: `hostname`.to_s.strip[-59..-1],
      users: users
    })
    source 'setup.sql.erb'
  end

  execute 'setup user/permissions' do
    command <<-END
      /data/bin/mysql \
        -u root \
        -S /tmp/mysqld.sock \
        < /tmp/setup.sql
    END
  end

  file '/tmp/setup.sql' do
    action :delete
  end

end

# Install extra packages

# Add extra paths
if payload[:extra_path_dirs] && payload[:extra_path_dirs].length > 0
  directory "/data/etc/env.d" do
    recursive true
    owner 'gomicro'
    group 'gomicro'
  end

  file "/data/etc/env.d/EXTRA_PATHS" do
    content payload[:extra_path_dirs].join(":")
    owner 'gomicro'
    group 'gomicro'
    mode 0444
  end
end

if payload[:extra_packages]
  execute "Install packages" do
    command "/data/bin/pkgin -y in #{payload[:extra_packages].join(' ')}"
    path "/data/sbin:/data/bin:/opt/gomicro/sbin:/opt/gomicro/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    user 'gomicro'
  end
end

if payload[:extra_steps]
  payload[:extra_steps].each_with_index do |cmd, i|

    execute "Extra Step: #{cmd}" do
      command "bash -i -l -c \"#{escape cmd}\""
      cwd "/data"
      path "/data/sbin:/data/bin:/opt/gomicro/sbin:/opt/gomicro/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      user 'gomicro'
    end
  end
end

# Set up cron
if payload[:member][:uid] == 1 && ! payload[:cron_jobs].nil?
  include Hookit::Helper::Cron
  include Hookit::Helper::Shell

  directory '/opt/microbox/cron/'

  payload[:cron_jobs].each_with_index do |job, id|
    template "/opt/microbox/cron/#{job[:id]}" do
      owner 'gomicro'
      source 'cron.erb'
      group 'gomicro'
      mode 0755
      variables ({
        component_uid: payload[:component][:uid],
        member_uid: payload[:member][:uid],
        logvac_host: payload[:logvac_host],
        command: escape_shell_string(job[:command]),
        cron_id: id + 1
      })
    end
  end

  template '/etc/crontab' do
    mode 0644
    variables ({ crons: payload[:cron_jobs] })
  end

end
